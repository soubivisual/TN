<CascadingValue Value="this">
    <nav class="navbar">
        <div class="navbar-wrapper">
            <div class="navbar-brand">
                <a href="/dashboard">
                    <img src="_content/TN.Client.Web.BlazorShared/assets/images/logo.svg" />
                </a>
                <a href="" class="close-menu" onclick="javascript:ToggleMenu()" @onclick:preventDefault><i class="feather icon-x"></i></a>
            </div>

            <div class="navbar-content">
                <ul class="inner-navbar">
                    @*<NavSeparator />
                    <NavMenuItem Url="/dashboard" Icon="feather icon-home" Text="Home" />
                    <NavMenuItem Url="/accounts" Icon="feather icon-credit-card" Text="Cuentas" Policy="@ApplicationPolicy.Client.ShowAccounts" />
                    <NavMenuItem Url="/transfers" Icon="feather icon-minimize-2" Text="Transferencias Locales" Policy="@ApplicationPolicy.Client.ShowTransfers">
                        <NavMenuItem Url="/transfers/monis" Text="A Cuentas Monis" Policy="@ApplicationPolicy.Client.TransferMonis" />
                        <NavMenuItem Url="/transfers/sinpe" Text="A Otros Bancos (SINPE)" Policy="@ApplicationPolicy.Client.ShowTransferSINPE" />
                        <NavMenuItem Url="/transfers/sinpemovil" Text="SINPE Móvil" Policy="@ApplicationPolicy.Client.TransferSINPEMovil" />
                        <NavMenuItem Url="/transfers/history" Text="Historial" Policy="@ApplicationPolicy.Client.ViewTransfers" />
                    </NavMenuItem>
                    <NavMenuItem Url="/international-transfers" Icon="feather icon-globe" Text="Transferencias Internacionales" Policy="@ApplicationPolicy.Client.ShowInternationalTransfers">
                        <NavMenuItem Url="/international-transfers/ripple" Text="GlobalPay" Policy="@ApplicationPolicy.Client.ShowRipple">
                            <NavMenuItem Url="/international-transfers/ripple/transfer" Text="Transferencias" Policy="@ApplicationPolicy.Client.TransferRipple" />
                            <NavMenuItem Url="/international-transfers/ripple/history" Text="Historial" Policy="@ApplicationPolicy.Client.ViewRipple" />
                        </NavMenuItem>
                        <NavMenuItem Url="/international-transfers/ripple-third-party" Text="GlobalPay Terceros" Policy="@ApplicationPolicy.Client.ShowRippleThirdParty">
                            <NavMenuItem Url="/international-transfers/ripple-third-party/transfer" Text="Transferencias" Policy="@ApplicationPolicy.Client.TransferRippleThirdParty" />
                            <NavMenuItem Url="/international-transfers/ripple-third-party/history" Text="Historial" Policy="@ApplicationPolicy.Client.ViewRippleThirdParty" />
                        </NavMenuItem>
                        <NavMenuItem Url="/international-transfers/pex" Text="Pagos al Exterior (PEX)" Policy="@ApplicationPolicy.Client.ShowPEX">
                            <NavMenuItem Url="/international-transfers/pex/transfer" Text="Transferencias" Policy="@ApplicationPolicy.Client.TransferPEX" />
                            <NavMenuItem Url="/international-transfers/pex/history" Text="Historial" Policy="@ApplicationPolicy.Client.ViewPEX" />
                        </NavMenuItem>
                        <NavMenuItem Url="/international-transfers/pex-third-party" Text="Pagos al Exterior Terceros" Policy="@ApplicationPolicy.Client.ShowPEXThirdParty">
                            <NavMenuItem Url="/international-transfers/pex-third-party/transfer" Text="Transferencias" Policy="@ApplicationPolicy.Client.TransferPEXThirdParty" />
                            <NavMenuItem Url="/international-transfers/pex-third-party/history" Text="Historial" Policy="@ApplicationPolicy.Client.ViewPEXThirdParty" />
                        </NavMenuItem>
                        <NavMenuItem Url="/international-transfers/visa-b2b" Text="VISA B2B" Policy="@ApplicationPolicy.Client.ShowVISAB2B">
                            <NavMenuItem Url="/international-transfers/visa-b2b/transfer" Text="Transferencias" Policy="@ApplicationPolicy.Client.TransferVISAB2B" />
                            <NavMenuItem Url="/international-transfers/visa-b2b/history" Text="Historial" Policy="@ApplicationPolicy.Client.ViewVISAB2B" />
                        </NavMenuItem>
                    </NavMenuItem>
                    <NavMenuItem Url="/managements" Icon="feather icon-briefcase" Text="Gestiones" Policy="@ApplicationPolicy.Client.ShowManagements">
                        <NavMenuItem Url="/managements/authorizations" Text="Autorizaciones" Policy="@ApplicationPolicy.Client.ViewAuthorizations" />
                    </NavMenuItem>
                    <NavMenuItem Url="/configuration" Icon="feather icon-settings" Text="Configuración" Policy="@ApplicationPolicy.Client.ShowConfiguration" />*@
                </ul>
            </div>
        </div>
    </nav>
</CascadingValue>

@code {
    //private NavCustomer NavCustomer;
    //private List<NavMenuItem> NavMenuItems = new List<NavMenuItem>();

    //protected override void OnInitialized()
    //{
    //    // Se agrega el siguiente delegate para que se pueda actualizar el menú desde otro componente (validar componente Shared/Redirect.razor)
    //    NotifyPropertyChanged.MenuChanged += async () =>
    //    {
    //        foreach (var item in NavMenuItems)
    //        {
    //            item.SubMenuOpened = NavigationManager.IsSelected(item.Url);
    //            item.Selected = NavigationManager.IsSelected(item.Url);
    //        }

    //        await JSRuntime.ResetSlideToggleMenuItem();
    //        this.StateHasChanged();
    //    };
    //}

    //internal void AddMenuItem(NavMenuItem navMenuItem)
    //{
    //    NavMenuItems.Add(navMenuItem);
    //}

    //public async Task OpenSubMenu(object navControl)
    //{
    //    if (navControl is NavMenuItem)
    //    {
    //        var navMenuItem = navControl as NavMenuItem;

    //        foreach (var item in NavMenuItems.Where(q => !q.Equals(navMenuItem) && !q.NavSubMenuItems.Any(p => p.Equals(navMenuItem))))
    //            item.SubMenuOpened = false;

    //        NavCustomer.SubMenuOpened = false;

    //        navMenuItem.SubMenuOpened = !navMenuItem.SubMenuOpened;
    //        await JSRuntime.SlideToggleMenuItem(navMenuItem.Id);
    //    }
    //    else if (navControl is NavCustomer)
    //    {
    //        var navCustomer = navControl as NavCustomer;

    //        foreach (var item in NavMenuItems)
    //            item.SubMenuOpened = false;

    //        navCustomer.SubMenuOpened = !navCustomer.SubMenuOpened;
    //        await JSRuntime.SlideToggleMenuItem(navCustomer.Id);
    //    }
    //    else
    //        throw new ArgumentException(nameof(navControl), "navControl must be NavMenuItem or NavCustomer instance");

    //    this.StateHasChanged();
    //}

    //public async Task SelectMenuItem(NavMenuItem navMenuItem)
    //{
    //    foreach (var item in NavMenuItems.Where(q => !q.Equals(navMenuItem)))
    //        item.Selected = false;

    //    navMenuItem.Selected = true;

    //    await JSRuntime.ToggleMenu();

    //    RedirectToUrl(navMenuItem.Url);

    //    this.StateHasChanged();
    //}

    //private void RedirectToUrl(string url)
    //{
    //    NavigationManager.NavigateTo($"/redirect/{HttpUtility.UrlEncode(url)}");
    //}
}