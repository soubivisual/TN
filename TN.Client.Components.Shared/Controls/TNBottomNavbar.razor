@if (ListNavbarItems!=null && ListNavbarItems.Count > 0)
{
<nav class="navbar fixed-bottom navbar-expand-sm">
    <div class="container-fluid">
        @foreach (BottomNavbarItem item in ListNavbarItems)
        {
            <a class="nav-link @( item.Active ? "active" : "" )" href="@item.Url" @onclick:preventDefault @onclick="@(() => ItemClicked(item))">
                <span class="nav-icon"><i class="feather @item.Icon"></i></span>
                <span class="nav-text">@item.Text</span>
            </a>
        }
    </div>
</nav>
}

@code {
    [Parameter] public List<BottomNavbarItem> ListNavbarItems { get; set; }
    public string ElementActive { get; set; }
    [Inject] protected NavigationManager NavigationManager { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && ListNavbarItems != null && string.IsNullOrEmpty(ElementActive))
        {
            ListNavbarItems.FirstOrDefault().Active = true;
            this.StateHasChanged();
        }
    }

    private async Task ItemClicked(BottomNavbarItem navMenuItem)
    {
        foreach (var item in ListNavbarItems.Where(q => !q.Equals(navMenuItem)))
            item.Active = false;
        navMenuItem.Active = true;

        RedirectToUrl(navMenuItem.Url);
    }

    private void RedirectToUrl(string url)
    {
        NavigationManager.NavigateTo($"/{HttpUtility.UrlEncode(url)}");
    }
    }

}

