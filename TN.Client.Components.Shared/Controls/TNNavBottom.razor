@using TN.Client.Services.Shared.Entities;

<CascadingValue Value="this">
    @if (MenuItems != null && MenuItems.Count > 0)
    {
        <nav class="navbar fixed-bottom navbar-expand-sm">
            <div class="container-fluid">
                @foreach (var menuItem in MenuItems)
                {
                    <TNNavBottomItem Url="@menuItem.Url" Text="@menuItem.Text" Icon="@menuItem.Icon"></TNNavBottomItem>
                }
            </div>
        </nav>
    }
</CascadingValue>



    @code {
        [Parameter] public List<MenuEntity> MenuItems { get; set; }
        public string ElementActive { get; set; }
        [Inject] protected NavigationManager NavigationManager { get; set; }

        private List<TNNavBottomItem> NavMenuItems = new List<TNNavBottomItem>();



        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            this.StateHasChanged();
        }

        internal void AddMenuItem(TNNavBottomItem navMenuItem)
        {
            NavMenuItems.Add(navMenuItem);
        }

        public async Task ItemClicked(TNNavBottomItem navMenuItem)
        {
            RedirectToUrl(navMenuItem.Url);
        }

        public async Task SelectMenuItem(TNNavBottomItem navMenuItem)
        {
            foreach (var item in NavMenuItems.Where(q => !q.Equals(navMenuItem)))
                item.Selected = false;

            navMenuItem.Selected = true;

            RedirectToUrl(navMenuItem.Url);

            this.StateHasChanged();
        }

        private void RedirectToUrl(string url)
        {
            NavigationManager.NavigateTo($"{url}");
        }
    }

    }

