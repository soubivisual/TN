@using TN.Client.Services.Shared.Entities;

@if (ListNavbarItems != null && ListNavbarItems.Count > 0)
{
    <nav class="navbar fixed-bottom navbar-expand-sm">
        <div class="container-fluid">
            @foreach (NavbarItemModel item in ListNavbarItems)
            {
                <a class="nav-link @( item.Selected ? "active" : "" )" href="@item.Url" @onclick:preventDefault @onclick="@(() => ItemClicked(item))">
                    <span class="fs-3"><i class="feather @item.Icon"></i></span>
                    <span>@item.Text</span>
                </a>
            }
        </div>
    </nav>
}

@code {
    [Parameter] public List<NavbarItemModel> ListNavbarItems { get; set; }
    public string ElementActive { get; set; }
    [Inject] protected NavigationManager NavigationManager { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        ValidateCurrentPath();
        this.StateHasChanged();
    }

    private async Task ItemClicked(NavbarItemModel navMenuItem)
    {
        RedirectToUrl(navMenuItem.Url);
    }

    private void ValidateCurrentPath() {
        foreach (var item in ListNavbarItems)
            item.Selected = false;

        string currentPath = $"/{NavigationManager.ToBaseRelativePath(NavigationManager.Uri)}";
        var navbarItem = ListNavbarItems.Where(q => q.Url == currentPath).FirstOrDefault();
        if (navbarItem != null)
        {
            navbarItem.Selected = true;
        }
    }

    private void RedirectToUrl(string url)
    {
        NavigationManager.NavigateTo($"{url}");
    }
}

}

