@using RegularExpressions = System.Text.RegularExpressions;
@inherits InputBase<string>

<label class="form-label" for="@Id" field-required="@(Required ?? ValidationFor.Body.IsRequired())">@(Label ?? ValidationFor.Body.GetDisplayName())</label>
<input @bind="CurrentValueAsString" type="@Type" pattern="@_pattern" class="form-control" id="@Id" name="@(Name ?? Id)" data-inputmask-regex="@(Mask ?? ValidationFor.Body.GetMask())" readonly="@Readonly" disabled="@Disabled" placeholder="@(Placeholder ?? ValidationFor.Body.GetDisplayPrompt())" maxlength="@(Maxlength ?? ValidationFor.Body.GetMaximumLength())" @attributes="AdditionalAttributes" />


@if (!string.IsNullOrEmpty(Instruction))
    {
        <p class="input-instruction">@Instruction</p>
    }
<ValidationMessage For="@ValidationFor" />

@code {
    [Parameter] public string Label { get; set; }
    [Parameter] public string Placeholder { get; set; }
    [Parameter] public string Id { get; set; }
    [Parameter] public string Name { get; set; }
    [Parameter] public object CollectionId { get; set; }
    [Parameter] public string Mask { get; set; }
    [Parameter] public string Regex { get; set; }
    [Parameter] public int? Maxlength { get; set; }
    [Parameter] public bool? Required { get; set; }
    [Parameter] public bool Readonly { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string Instruction { get; set; }
    [Parameter] public Expression<Func<string>> ValidationFor { get; set; }
    [Parameter] public string Type { get; set; } = "text";
    [Parameter] public bool IsPassword { get; set; }
    [Parameter] public bool ShowPassword { get; set; }
    [Parameter] public EventCallback OnClick { get; set; }

    [Inject] protected IJSRuntime JSRuntime { get; set; }

    private string _pattern = "";


    protected override void OnParametersSet()
    {
        Id ??= CollectionId == null ? FieldIdentifier.GetName() : $"{FieldIdentifier.GetName()}_{CollectionId.ToString()}";

        if (IsPassword)
        {
            if (ShowPassword)
            {
                Type = "text";
                Task.Delay(700).ContinueWith((_)=> Type = "password");
            }
            else
            {
                Type = "password";
            }
        }
        if (Type=="number")
        {
            _pattern = "[0-9]*";
        }
    }
    protected override bool TryParseValueFromString(string value, out string result, out string validationErrorMessage)
    {
        result = value.Trim();

        // Por lo general, se validarán expresiones regulares por medio de DataAnnotations, sin embargo, para el caso de las identificaciones que el formato cambia dependiendo del tipo de id seleccionado,
        // se agrega el siguiente código para realizar una validación manual
        if (!string.IsNullOrEmpty(Regex) && !string.IsNullOrEmpty(value))
        {
            var match = RegularExpressions.Regex.Match(value.ToString(), Regex);

            if (!match.Success)
            {
                validationErrorMessage = $"Formato no válido para el campo {Label ?? ValidationFor.Body.GetDisplayName()}";
                return false;
            }
        }

        validationErrorMessage = null;
        return true;
    }

}
