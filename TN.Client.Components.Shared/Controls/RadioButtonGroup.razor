@typeparam T
@inherits InputBase<T>

<label class="form-label" field-required="@(Required ?? ValidationFor.Body.IsRequired())">@(Label ?? ValidationFor.Body.GetDisplayName())</label>
<div class="form-group">
    <InputRadioGroup Name="@Name" @bind-Value="CurrentValue" @attributes="AdditionalAttributes">
        @foreach (var option in Options)
        {
            <div class="d-inline-block">
                <div class="radio radio-primary d-inline">
                    <InputRadio Name="@Name" Value="option.Key" id="@(Name + "_" + option.Key)" disabled="@Disabled" />
                    <label for="@(Name + "_" + option.Key)" class="cr">@option.Value</label>
                </div>
            </div>
        }
    </InputRadioGroup>
</div>
@if (!string.IsNullOrEmpty(Instruction))
{
    <p class="input-instruction">@Instruction</p>
}
<ValidationMessage For="@ValidationFor" />

@code {
    [Parameter] public string Label { get; set; }
    [Parameter] public string Name { get; set; }
    [Parameter] public bool? Required { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string Instruction { get; set; }
    [Parameter] public Dictionary<T, string> Options { get; set; }
    [Parameter] public Expression<Func<T>> ValidationFor { get; set; }

    protected override bool TryParseValueFromString(string value, out T result, out string validationErrorMessage)
    {
        result = (T)(object)value;
        validationErrorMessage = null;
        return true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }
}