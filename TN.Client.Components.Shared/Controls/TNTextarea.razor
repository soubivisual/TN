@using RegularExpressions = System.Text.RegularExpressions;
@inherits InputBase<string>

<label class="form-label" for="@Id" field-required="@(Required ?? ValidationFor.Body.IsRequired())">@(Label ?? ValidationFor.Body.GetDisplayName())</label>
<textarea @bind="CurrentValueAsString" class="form-control" id="@Id" name="@(Name ?? Id)" rows="@Rows" cols="@Cols" readonly="@Readonly" disabled="@Disabled" placeholder="@(Placeholder ?? ValidationFor.Body.GetDisplayPrompt())" maxlength="@(Maxlength ?? ValidationFor.Body.GetMaximumLength())" @attributes="AdditionalAttributes">
</textarea>
@if (!string.IsNullOrEmpty(Instruction))
{
    <p class="input-instruction">@Instruction</p>
}
<ValidationMessage For="@ValidationFor" />

@code {
    [Parameter] public string Label { get; set; }
    [Parameter] public string Placeholder { get; set; }
    [Parameter] public string Id { get; set; }
    [Parameter] public string Name { get; set; }
    [Parameter] public object CollectionId { get; set; }
    [Parameter] public int Rows { get; set; }
    [Parameter] public int Cols { get; set; }
    [Parameter] public int? Maxlength { get; set; }
    [Parameter] public bool? Required { get; set; }
    [Parameter] public bool Readonly { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string Instruction { get; set; }
    [Parameter] public Expression<Func<string>> ValidationFor { get; set; }

    protected override void OnParametersSet()
    {
        Id ??= CollectionId == null ? FieldIdentifier.GetName() : $"{FieldIdentifier.GetName()}_{CollectionId.ToString()}";
    }

    protected override bool TryParseValueFromString(string value, out string result, out string validationErrorMessage)
    {
        result = value.Trim();
        validationErrorMessage = null;
        return true;
    }
}
