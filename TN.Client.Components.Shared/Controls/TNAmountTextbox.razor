@using System.Globalization;

@inherits InputBase<decimal>

<label class="form-label" for="@Id" field-required="@ValidationFor.Body.IsRequired()">@(Label ?? ValidationFor.Body.GetDisplayName())</label>
<div class="input-group">
    <div class="input-group-prepend">
        @*<span class="input-group-text">@(Currency?.Nvarchar1 ?? "?")</span>*@
        @*<span class="input-group-text">@(Currency?.Nvarchar1 ?? "?")</span>*@
    </div>
    <input @ref="Reference" @bind="@CurrentValueAsString" type="text" maxlength="15" onclick="this.setSelectionRange(0, this.value.length)" disabled="@Disabled" class="form-control text-right" id="@Id" placeholder="@(Placeholder ?? ValidationFor.Body.GetDisplayPrompt())" autocomplete="off" />
</div>
<ValidationMessage For="@ValidationFor" />

@code {
    [Parameter] public string Label { get; set; }
    [Parameter] public string Placeholder { get; set; } = "0.00";
    [Parameter] public object CollectionId { get; set; }
    [Parameter] public bool Disabled { get; set; }
    //[Parameter] public CatalogEntity Currency { get; set; }
    [Parameter] public Expression<Func<decimal>> ValidationFor { get; set; }

    [Inject] protected IJSRuntime JSRuntime { get; set; }

    private string Id;
    private ElementReference Reference;

    protected override void OnParametersSet()
    {
        Id = CollectionId == null ? FieldIdentifier.GetName() : $"{FieldIdentifier.GetName()}_{CollectionId.ToString()}";
    }

    protected override bool TryParseValueFromString(string value, out decimal result, out string validationErrorMessage)
    {
        decimal.TryParse(value, NumberStyles.Currency, CultureInfo.InvariantCulture, out var parsedValue);
        result = parsedValue;
        validationErrorMessage = null;
        return true;
    }

    protected override string FormatValueAsString(decimal value) => value.ToString(ApplicationConstant.DecimalFormat);

    public async Task FocusAsync() => await Reference.FocusAsync();

    public async Task ForceBindValue() => await JSRuntime.BindBlazorProperty(Id);
}

